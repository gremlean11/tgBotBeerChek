import React, { useEffect, useState } from 'react';
import './App.css';

function App() {
  const [tgUser, setTgUser] = useState(null);
  const [beerDb, setBeerDb] = useState([]);
  const [query, setQuery] = useState('');
  const [result, setResult] = useState(null);
  const [rating, setRating] = useState(0);
  const [avgRating, setAvgRating] = useState(null);
  const [message, setMessage] = useState('');

  useEffect(() => {
    if (window.Telegram && window.Telegram.WebApp) {
      window.Telegram.WebApp.ready();
      setTgUser(window.Telegram.WebApp.initDataUnsafe.user);
    }
    fetch('/beer_db.json')
      .then(res => res.json())
      .then(data => setBeerDb(data));
  }, []);

  const handleSearch = () => {
    if (!query.trim()) return;
    const q = query.trim().toLowerCase();
    const found = beerDb.find(b => b.name.toLowerCase().includes(q));
    setResult(found || null);
    setMessage(found ? '' : '–ü–∏–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    setRating(0);
    setAvgRating(null);
    if (found) {
      fetch(`https://tgbotbeerchek.onrender.com/rating?beer=${encodeURIComponent(found.name)}`)
        .then(res => res.json())
        .then(data => setAvgRating(data.avg_rating))
        .catch(() => setAvgRating(null));
    }
  };

  const handleRate = (value) => {
    setRating(value);
    if (window.Telegram && window.Telegram.WebApp) {
      window.Telegram.WebApp.sendData(JSON.stringify({
        action: 'rate',
        beer: result.name,
        rating: value
      }));
      setMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!');
    }
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    fetch('https://tgbotbeerchek.onrender.com/rating', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ beer: result.name, rating: value })
    }).then(() => handleSearch()); // –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>üç∫ Beer Info Mini App</h1>
        {tgUser ? (
          <p>–ü—Ä–∏–≤–µ—Ç, {tgUser.first_name}!</p>
        ) : (
          <p>–ü—Ä–∏–≤–µ—Ç, –≥–æ—Å—Ç—å!</p>
        )}
        <input
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏–≤–∞"
          value={query}
          onChange={e => setQuery(e.target.value)}
          style={{margin: '10px', padding: '5px'}}
        />
        <button onClick={handleSearch}>–ù–∞–π—Ç–∏</button>
        {result && (
          <div style={{marginTop: 20, background: '#222', padding: 16, borderRadius: 8}}>
            <h2>{result.name}</h2>
            <p><b>–ë—Ä–µ–Ω–¥:</b> {result.brand}</p>
            <p><b>–°—Ç—Ä–∞–Ω–∞:</b> {result.country}</p>
            <p><b>–ö—Ä–µ–ø–æ—Å—Ç—å:</b> {result.abv || '-'}%</p>
            <p><b>–°–æ—Ä—Ç:</b> {result.style || '-'}</p>
            <p><b>–û–±—ä–µ–º:</b> {result.volume || '-'} –º–ª</p>
            <p><b>–£–ø–∞–∫–æ–≤–∫–∞:</b> {result.package || '-'}</p>
            <p><b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b> {result.filtration || '-'}</p>
            <p><b>–ò–º–ø–æ—Ä—Ç:</b> {result.imported || '-'}</p>
            <p><b>–í–∫—É—Å–æ–≤–æ–µ:</b> {result.flavored || '-'}</p>
            <p><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {result.description || '-'}</p>
            <p><b>–†–µ–π—Ç–∏–Ω–≥:</b> {avgRating !== null ? avgRating : (result.rating || '-')}</p>
            <div style={{marginTop: 10}}>
              <span>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: </span>
              {[1,2,3,4,5,6,7,8,9,10].map(i => (
                <button
                  key={i}
                  style={{margin: 2, background: rating === i ? '#4caf50' : '#444', color: '#fff', border: 'none', borderRadius: 4, padding: '2px 6px'}}
                  onClick={() => handleRate(i)}
                >{i}</button>
              ))}
            </div>
          </div>
        )}
        {message && <p style={{color: '#ffb300', marginTop: 20}}>{message}</p>}
      </header>
    </div>
  );
}

export default App;
